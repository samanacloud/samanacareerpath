version: '3.8'

services:
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_php
    ports:
      - "${BACKEND_PORT}:80"
    volumes:
      - ./backend/src:/var/www/html/api  #The folder is not being overwritted and the vendor folder did not dissapeared
    env_file:
      - ./.env
   # depends_on:
     # db:
     #   condition: service_healthy
    networks:
      - scp-network

  db:
    image: mysql:8.0
    container_name: backend_mysql
    restart: always
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
 #     - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
      - BACKEND_PROTOCOL=${BACKEND_PROTOCOL}
      - SITE_URL=${SITE_URL}

    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./db:/docker-entrypoint-initdb.d
    entrypoint: ["/docker-entrypoint-initdb.d/initialize-database.sh"]
  #  healthcheck:
   #   test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
   #   interval: 3s
   #   timeout: 2s
   #   retries: 1
    networks:
      - scp-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_node  
    ports:
      - "${FRONTEND_PORT}:5173"
    environment:
      - NODE_ENV=${NODE_ENV}
      - NODE_PORT=${NODE_PORT}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
      - VITE_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - VITE_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - VITE_GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - VITE_SITE_URL=${SITE_URL}
   # volumes:
    #  - ./frontend/src:/usr/src/src/app  #The folder is not being overwritted and the vendor folder did not dissapeared
    env_file:
      - ./.env
    networks:
      - scp-network
    command: npm run dev -- --host --force 

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx_proxy
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl

    networks:
      - scp-network

networks:
  scp-network:
    driver: bridge

volumes:
  db_data:

